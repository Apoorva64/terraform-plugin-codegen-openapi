// ir package contains Go bindings for the Framework IR JSON schema. This should eventually be deleted in favor of official bindings
//
// Generated by https://quicktype.io
// https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype
//   - Copy /intermediate_representation/schema.json and run `Paste JSON Schema as Code` command
package ir

type FrameworkIR struct {
	Provider  Provider   `json:"provider"`
	Resources []Resource `json:"resources"`
}

type Provider struct {
	Name string `json:"name"`
}

type SingleNestedAttribute struct {
	Attributes               []ResourceAttribute      `json:"attributes"`
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type NestedObjectClass struct {
	Attributes []ResourceAttribute `json:"attributes"`
	CustomType *CustomType         `json:"custom_type,omitempty"`
	Validators []string            `json:"validators"`
}

type ListNestedAttribute struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	NestedObject             NestedObjectClass        `json:"nested_object"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type ResourceAttribute struct {
	Name string                `json:"name"`
	Type ResourceAttributeType `json:"type"`
}

type CustomType struct {
	Import    string `json:"import"`
	Type      string `json:"type"`
	ValueType string `json:"value_type"`
}

type DataSourceBool struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type ResourceList struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	ElementType              ElementType              `json:"element_type"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type ElementTypeObject struct {
	Name string      `json:"name"`
	Type ElementType `json:"type"`
}

type ElementTypeMap struct {
	ElementType ElementType `json:"element_type"`
}

type ElementTypeList struct {
	ElementType ElementType `json:"element_type"`
}

type ElementType struct {
	Bool    *ElementTypeBool    `json:"bool,omitempty"`
	Int64   *ElementTypeInt64   `json:"int64,omitempty"`
	Float64 *ElementTypeFloat64 `json:"float64,omitempty"`
	Number  *ElementTypeNumber  `json:"number,omitempty"`
	List    *ElementTypeList    `json:"list,omitempty"`
	Map     *ElementTypeMap     `json:"map,omitempty"`
	Object  []ElementTypeObject `json:"object"`
	String  *ElementTypeString  `json:"string,omitempty"`
}

type ElementTypeBool struct {
}

type ElementTypeInt64 struct {
}

type ElementTypeFloat64 struct {
}

type ElementTypeNumber struct {
}

type ElementTypeString struct {
}

type ResourceObject struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	ObjectType               []ElementTypeObject      `json:"object_type"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type SingleNestedBlock struct {
	Attributes         []ResourceAttribute `json:"attributes"`
	Blocks             []BlockElement      `json:"blocks"`
	CustomType         *CustomType         `json:"custom_type,omitempty"`
	DeprecationMessage *string             `json:"deprecation_message,omitempty"`
	Description        *string             `json:"description,omitempty"`
	Validators         []string            `json:"validators"`
}

type NestedObject struct {
	Attributes []ResourceAttribute `json:"attributes"`
	Blocks     []BlockElement      `json:"blocks"`
	CustomType *CustomType         `json:"custom_type,omitempty"`
	Validators []string            `json:"validators"`
}

type ListNestedBlock struct {
	CustomType         *CustomType  `json:"custom_type,omitempty"`
	DeprecationMessage *string      `json:"deprecation_message,omitempty"`
	Description        *string      `json:"description,omitempty"`
	NestedObject       NestedObject `json:"nested_object"`
	Validators         []string     `json:"validators"`
}

type BlockType struct {
	ListNested   *ListNestedBlock   `json:"list_nested,omitempty"`
	SingleNested *SingleNestedBlock `json:"single_nested,omitempty"`
}

type BlockElement struct {
	Name string    `json:"name"`
	Type BlockType `json:"type"`
}

type Resource struct {
	Name   string         `json:"name"`
	Schema ResourceSchema `json:"schema"`
}

type ResourceSchema struct {
	Attributes []ResourceAttribute `json:"attributes"`
	Blocks     []BlockElement      `json:"blocks"`
}

type ResourceAttributeType struct {
	Bool         *ResourceBool          `json:"bool,omitempty"`
	String       *ResourceString        `json:"string,omitempty"`
	Int64        *ResourceInt64         `json:"int64,omitempty"`
	Number       *ResourceNumber        `json:"number,omitempty"`
	Float64      *ResourceFloat64       `json:"float64,omitempty"`
	List         *ResourceList          `json:"list,omitempty"`
	Object       *ResourceObject        `json:"object,omitempty"`
	ListNested   *ListNestedAttribute   `json:"list_nested,omitempty"`
	SingleNested *SingleNestedAttribute `json:"single_nested,omitempty"`
}

type ResourceBool struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	CustomType               *CustomType              `json:"custom_type,omitempty"`
	Default                  *bool                    `json:"default,omitempty"`
	DeprecationMessage       *string                  `json:"deprecation_message,omitempty"`
	Description              *string                  `json:"description,omitempty"`
	PlanModifiers            []string                 `json:"plan_modifiers"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
	Validators               []string                 `json:"validators"`
}

type ResourceString struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	Description              *string                  `json:"description,omitempty"`
	Sensitive                *bool                    `json:"sensitive,omitempty"`
}

type ResourceInt64 struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	Description              *string                  `json:"description,omitempty"`
}

type ResourceNumber struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	Description              *string                  `json:"description,omitempty"`
}

type ResourceFloat64 struct {
	ComputedOptionalRequired ComputedOptionalRequired `json:"computed_optional_required"`
	Description              *string                  `json:"description,omitempty"`
}

type ComputedOptionalRequired string

const (
	Computed         ComputedOptionalRequired = "computed"
	ComputedOptional ComputedOptionalRequired = "computed_optional"
	Optional         ComputedOptionalRequired = "optional"
	Required         ComputedOptionalRequired = "required"
)
